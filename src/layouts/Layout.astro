---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="es" class="scroll-smooth">
<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width" />
	<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
	<meta name="generator" content={Astro.generator} />
	<title>{title}</title>
  <style>
    :root {
      --tw-bg-opacity: 1;
      background-color: rgb(17 24 39 / var(--tw-bg-opacity));
      background-image: url("data:image/svg+xml,%3csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle cx='1' cy='1' r='1' fill='rgba(255,255,255,0.05)'/%3e%3c/svg%3e");
    }
    html.scroll-smooth {
      scroll-behavior: smooth;
    }
  </style>
  <style is:global>
		.fade-in-element {
			opacity: 0;
			transform: translateY(20px);
			transition: opacity 0.6s ease-out, transform 0.6s ease-out;
		}
		.fade-in-element.is-visible {
			opacity: 1;
			transform: translateY(0);
		}
	</style>
</head>
<body>
	<slot />
  <script>
		document.addEventListener('DOMContentLoaded', () => {
			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						entry.target.classList.add('is-visible');
						observer.unobserve(entry.target);
					}
				});
			}, {
				threshold: 0.1
			});

			const elementsToFadeIn = document.querySelectorAll('.fade-in-element');
			elementsToFadeIn.forEach(el => {
				observer.observe(el);
			});
		});
	</script>
</body>
</html>
